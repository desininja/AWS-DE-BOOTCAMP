#THis is the script for Glue JOB

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrameCollection
from awsglue.dynamicframe import DynamicFrame
from awsglue import DynamicFrame
from pyspark.sql import functions as SqlFuncs


# Script generated for node Custom Transform
def MyTransform(glueContext, dfc) -> DynamicFrameCollection:
    import pymysql

    pymysql.install_as_MySQLdb()
    import MySQLdb

    dbname = "debit_card_spends"
    table_name = "daily_aggregation"

    user_name = "mysql_admin"
    password = "123456789"
    host = "debit-card-customer.cl80ocesmj0s.us-east-1.rds.amazonaws.com"
    port = 3306

    mysql_client = MySQLdb.connect(
        host=host, user=user_name, passwd=password, port=port, database=dbname
    )

    cur = mysql_client.cursor(MySQLdb.cursors.DictCursor)
    query = "TRUNCATE TABLE {0}.{1}".format(dbname, table_name)
    cur.execute(query)
    mysql_client.commit()

    # new_df = dfc.select(list(dfc.keys())[0]).toDF()
    # new_custom_dyc = DynamicFrame.fromDF(new_df,glueContext,"new_df_data")

    df = dfc.select(list(dfc.keys())[0]).toDF()
    df_ = DynamicFrame.fromDF(df, glueContext, "new_df")
    return DynamicFrameCollection({"CustomTransform0": df_}, glueContext)


def sparkSqlQuery(glueContext, query, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(query)
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)


def sparkUnion(glueContext, unionType, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(
        "(select * from source1) UNION " + unionType + " (select * from source2)"
    )
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)


def sparkAggregate(
    glueContext, parentFrame, groups, aggs, transformation_ctx
) -> DynamicFrame:
    aggsFuncs = []
    for column, func in aggs:
        aggsFuncs.append(getattr(SqlFuncs, func)(column))
    result = (
        parentFrame.toDF().groupBy(*groups).agg(*aggsFuncs)
        if len(groups) > 0
        else parentFrame.toDF().agg(*aggsFuncs)
    )
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)


args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node Amazon S3
AmazonS3_node1711377210905 = glueContext.create_dynamic_frame.from_catalog(
    database="transaction-metadata-db",
    table_name="s3_input_customer_debit_card_daily_purchase_data_landing",
    transformation_ctx="AmazonS3_node1711377210905",
)

# Script generated for node AWS Glue Data Catalog
AWSGlueDataCatalog_node1711377618806 = glueContext.create_dynamic_frame.from_catalog(
    database="transaction-metadata-db",
    table_name="debit_card_spends_daily_aggregation",
    transformation_ctx="AWSGlueDataCatalog_node1711377618806",
)

# Script generated for node Aggregate
Aggregate_node1711377226443 = sparkAggregate(
    glueContext,
    parentFrame=AmazonS3_node1711377210905,
    groups=["customer_id", "debit_card_number", "bank_name"],
    aggs=[["amount_spend", "sum"]],
    transformation_ctx="Aggregate_node1711377226443",
)

# Script generated for node SQL Query
SqlQuery934 = """
select * from myDataSource
"""
SQLQuery_node1711377687942 = sparkSqlQuery(
    glueContext,
    query=SqlQuery934,
    mapping={"myDataSource": AWSGlueDataCatalog_node1711377618806},
    transformation_ctx="SQLQuery_node1711377687942",
)

# Script generated for node Schema Matcher for Union
SchemaMatcherforUnion_node1711377904485 = ApplyMapping.apply(
    frame=Aggregate_node1711377226443,
    mappings=[
        ("customer_id", "long", "customer_id", "long"),
        ("debit_card_number", "long", "debit_card_number", "long"),
        ("bank_name", "string", "bank_name", "string"),
        ("`sum(amount_spend)`", "double", "total_amount_spend", "float"),
    ],
    transformation_ctx="SchemaMatcherforUnion_node1711377904485",
)

# Script generated for node Union
Union_node1711377867977 = sparkUnion(
    glueContext,
    unionType="ALL",
    mapping={
        "source1": SQLQuery_node1711377687942,
        "source2": SchemaMatcherforUnion_node1711377904485,
    },
    transformation_ctx="Union_node1711377867977",
)

# Script generated for node Custom Transform
CustomTransform_node1711386224565 = MyTransform(
    glueContext,
    DynamicFrameCollection(
        {"Union_node1711377867977": Union_node1711377867977}, glueContext
    ),
)

# Script generated for node Select From Collection
SelectFromCollection_node1711387177985 = SelectFromCollection.apply(
    dfc=CustomTransform_node1711386224565,
    key=list(CustomTransform_node1711386224565.keys())[0],
    transformation_ctx="SelectFromCollection_node1711387177985",
)

# Script generated for node Aggregate
Aggregate_node1711378401004 = sparkAggregate(
    glueContext,
    parentFrame=SelectFromCollection_node1711387177985,
    groups=["customer_id", "debit_card_number", "bank_name"],
    aggs=[["total_amount_spend", "sum"]],
    transformation_ctx="Aggregate_node1711378401004",
)

# Script generated for node Change Schema
ChangeSchema_node1711382765447 = ApplyMapping.apply(
    frame=Aggregate_node1711378401004,
    mappings=[
        ("customer_id", "string", "customer_id", "string"),
        ("debit_card_number", "string", "debit_card_number", "string"),
        ("bank_name", "string", "bank_name", "string"),
        ("`sum(total_amount_spend)`", "double", "total_amount_spend", "double"),
    ],
    transformation_ctx="ChangeSchema_node1711382765447",
)

# Script generated for node MySQL
MySQL_node1711378523444 = glueContext.write_dynamic_frame.from_catalog(
    frame=ChangeSchema_node1711382765447,
    database="transaction-metadata-db",
    table_name="debit_card_spends_daily_aggregation",
    transformation_ctx="MySQL_node1711378523444",
)

job.commit()
